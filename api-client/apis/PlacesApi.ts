/* tslint:disable */
/* eslint-disable */
/**
 * WebApplication1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Place, PlacesResponseDTO } from '../models/index';
import {
  PlaceFromJSON,
  PlaceToJSON,
  PlacesResponseDTOFromJSON,
  PlacesResponseDTOToJSON,
} from '../models/index';

export interface ApiPlacesGetRequest {
  pageNumber?: number;
  pageSize?: number;
}

export interface ApiPlacesIdDeleteRequest {
  id: string;
}

export interface ApiPlacesIdGetRequest {
  id: string;
}

export interface ApiPlacesIdPatchRequest {
  id: string;
  title?: string;
  description?: string;
  address?: string;
  image?: Blob;
}

export interface ApiPlacesPostRequest {
  title?: string;
  description?: string;
  address?: string;
  image?: Blob;
}

export interface ApiPlacesUserUserIdGetRequest {
  userId: string;
  pageNumber?: number;
  pageSize?: number;
}

/**
 *
 */
export class PlacesApi extends runtime.BaseAPI {
  constructor(configuration?: runtime.Configuration) {
    super(configuration);
  }
  /**
   */
  async apiPlacesGetRaw(
    requestParameters: ApiPlacesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PlacesResponseDTO>> {
    const queryParameters: any = {};

    if (requestParameters['pageNumber'] != null) {
      queryParameters['pageNumber'] = requestParameters['pageNumber'];
    }

    if (requestParameters['pageSize'] != null) {
      queryParameters['pageSize'] = requestParameters['pageSize'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization'
      ); // oauth2 authentication
    }

    const response = await this.request(
      {
        path: `/api/Places`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PlacesResponseDTOFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiPlacesGet(
    requestParameters: ApiPlacesGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PlacesResponseDTO> {
    const response = await this.apiPlacesGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiPlacesIdDeleteRaw(
    requestParameters: ApiPlacesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling apiPlacesIdDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization'
      ); // oauth2 authentication
    }

    const response = await this.request(
      {
        path: `/api/Places/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiPlacesIdDelete(
    requestParameters: ApiPlacesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiPlacesIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   */
  async apiPlacesIdGetRaw(
    requestParameters: ApiPlacesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Place>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling apiPlacesIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization'
      ); // oauth2 authentication
    }

    const response = await this.request(
      {
        path: `/api/Places/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PlaceFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiPlacesIdGet(
    requestParameters: ApiPlacesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Place> {
    const response = await this.apiPlacesIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiPlacesIdPatchRaw(
    requestParameters: ApiPlacesIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Place>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling apiPlacesIdPatch().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization'
      ); // oauth2 authentication
    }

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['title'] != null) {
      formParams.append('Title', requestParameters['title'] as any);
    }

    if (requestParameters['description'] != null) {
      formParams.append('Description', requestParameters['description'] as any);
    }

    if (requestParameters['address'] != null) {
      formParams.append('Address', requestParameters['address'] as any);
    }

    if (requestParameters['image'] != null) {
      formParams.append('Image', requestParameters['image'] as any);
    }

    const response = await this.request(
      {
        path: `/api/Places/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PlaceFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiPlacesIdPatch(
    requestParameters: ApiPlacesIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Place> {
    const response = await this.apiPlacesIdPatchRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiPlacesPostRaw(
    requestParameters: ApiPlacesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Place>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization'
      ); // oauth2 authentication
    }

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['title'] != null) {
      formParams.append('Title', requestParameters['title'] as any);
    }

    if (requestParameters['description'] != null) {
      formParams.append('Description', requestParameters['description'] as any);
    }

    if (requestParameters['address'] != null) {
      formParams.append('Address', requestParameters['address'] as any);
    }

    if (requestParameters['image'] != null) {
      formParams.append('Image', requestParameters['image'] as any);
    }

    const response = await this.request(
      {
        path: `/api/Places`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PlaceFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiPlacesPost(
    requestParameters: ApiPlacesPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Place> {
    const response = await this.apiPlacesPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiPlacesUserUserIdGetRaw(
    requestParameters: ApiPlacesUserUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PlacesResponseDTO>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling apiPlacesUserUserIdGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['pageNumber'] != null) {
      queryParameters['pageNumber'] = requestParameters['pageNumber'];
    }

    if (requestParameters['pageSize'] != null) {
      queryParameters['pageSize'] = requestParameters['pageSize'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization'
      ); // oauth2 authentication
    }

    const response = await this.request(
      {
        path: `/api/Places/user/{userId}`.replace(
          `{${'userId'}}`,
          encodeURIComponent(String(requestParameters['userId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PlacesResponseDTOFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiPlacesUserUserIdGet(
    requestParameters: ApiPlacesUserUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PlacesResponseDTO> {
    const response = await this.apiPlacesUserUserIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
